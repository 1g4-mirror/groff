.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by the University of
.\"      California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)doc-common 5.7 (Berkeley) 8/5/91
.\"
.\"     %beginstrip%
.
.eo
.
.
.\" Macro Identifiers.  For each user macro a corresponding register with
.\" the same name must exist.  Its value must not be zero.
.
.nr %A 1
.nr %B 1\" ?
.nr %D 1\" ?
.nr %J 1
.nr %N 1
.nr %O 1
.nr %P 1\" ?
.nr %Q 1\" ?
.nr %R 1
.nr %T 1
.nr %V 1
.nr Ac 3
.nr Ad 12n
.nr An 12n
.nr Ao 12n
.nr Ap 2
.nr Aq 12n
.nr Ar 12n
.nr At 8n\" ?
.nr Bc 3
.nr Bd 8n\" ?
.nr Bf 8n\" ?
.nr Bk 8n\" ?
.nr Bl 1
.nr Bo 12n
.nr Bq 12n
.nr Bsx 6n\" ?
.nr Bt 8n\" ?
.nr Bx 12n
.nr Cd 12n
.nr Cm 10n
.nr D1 8n\" ?
.nr Dc 3
.nr Dl 8n\" ?
.nr Dt 8n\" ?
.nr Do 10n
.nr Dq 12n
.nr Dv 12n
.nr Ec 3
.nr Ed 8n\" ?
.nr Ef 8n\" ?
.nr Ek 8n\" ?
.nr El 1
.nr Em 10n
.nr Eo 12n
.nr Eq 12n
.nr Er 12n
.nr Ev 15n
.nr Ex 10n
.nr Fa 12n
.nr Fc 3
.nr Fd 12n\" ?
.nr Fl 10n
.nr Fn 16n
.nr Fo 16n
.nr Fr 12n\" ?
.nr Ft 8n\" ?
.nr Fx 12n\" ?
.nr Hf 8n\" ?
.nr Ic 10n
.nr In 12n\" ?
.nr It 8n\" ?
.nr Lb 6n\" ?
.nr Li 16n
.nr Lk 6n\" ?
.nr Lp 8n\" ?
.nr Me 6n
.nr Ms 6n
.nr Mt 6n\" ?
.nr Nd 8n\" ?
.nr Nm 10n
.nr No 12n
.nr Ns 2
.nr Nx 12n\" ?
.nr Oc 3
.nr Oo 10n
.nr Op 14n
.nr Or 6n\" ?
.nr Os 6n\" ?
.nr Ot 8n\" ?
.nr Ox 12n\" ?
.nr Pa 32n
.nr Pc 3
.nr Pf 12n
.nr Po 12n
.nr Pp 8n\" ?
.nr Pq 12n
.nr Re 8n\" ?
.nr Rs 8n\" ?
.nr Qc 3
.nr Ql 16n
.nr Qo 12n
.nr Qq 12n
.nr Rv 1
.nr Sc 3
.nr Sf 8n\" ?
.nr Sh 8n\" ?
.nr Sm 8n\" ?
.nr So 12n
.nr Sq 12n
.nr Ss 8n\" ?
.nr St 8n\" ?
.nr Sx 16n
.nr Sy 6n
.nr Ta 2
.nr Tn 10n
.nr Ud 8n\" ?
.nr Ux 10n
.nr Va 12n
.nr Vt 8n\" ?
.nr Xc 3
.nr Xo 1
.nr Xr 10n
.
.
.nr doc-display-indent 6n
.
.
.\" space strings
.
.ds doc-soft-space " \"
.ds doc-hard-space \~
.
.
.\" punctuation values (suffix=3, prefix = 4)
.
.nr doc-punct. 3
.nr doc-punct, 3
.nr doc-punct: 3
.nr doc-punct; 3
.nr doc-punct( 4
.nr doc-punct) 3
.nr doc-punct[ 4
.nr doc-punct] 3
.
.
.\" header assembly macros
.
.\" NS doc-document-title global string
.\" NS   the title of the manual page
.
.ds doc-document-title UNTITLED
.
.
.\" NS doc-volume global string
.\" NS   the volume where the manual page belongs to
.
.ds doc-volume LOCAL
.
.
.\" NS doc-section global string
.\" NS   the manual section
.
.ds doc-section Null
.
.
.\" NS Dt user macro (not parsed, not callable)
.\" NS   document title
.\" NS
.\" NS modifies:
.\" NS   doc-document-title, doc-volume, doc-section
.\" NS
.\" NS width register `Dt' set above
.
.ds doc-volume-ds-USD   User's Supplementary Documents
.ds doc-volume-ds-PS1   Programmers's Supplementary Documents
.ds doc-volume-ds-AMD   Ancestral Manual Documents
.ds doc-volume-ds-SMM   System Manager's Manual
.ds doc-volume-ds-URM   Reference Manual
.ds doc-volume-ds-PRM   Programmers's Manual
.ds doc-volume-ds-KM    Kernel Manual
.ds doc-volume-ds-IND   Manual Master Index
.ds doc-volume-ds-LOCAL Local Manual
.
.ds doc-volume-as-tahoe " (Tahoe Architecture)
.ds doc-volume-as-vax   " (VAX Architecture)
.ds doc-volume-as-hp300 " (HP300 Architecture)
.
.de Dt
.  if !"\$1"" \
.    ds doc-document-title \$1
.
.  if !"\$2"" \{\
.    ds doc-section \$2
.    \" .if "\$3"" \{\
.    if (\$2 >= 1) .if (\$2 <= 8) \{\
.      ds doc-volume System Reference Manual
.      if (\$2 > 1) .if (\$2 < 6) \
.          ds doc-volume System Programmer's Manual
.      if "\$2"8" \
.        ds doc-volume System Manager's Manual
.    \}
.
.    if "\$2"unass" .ds doc-volume DRAFT
.    if "\$2"draft" .ds doc-volume DRAFT
.    if "\$2"paper" .ds doc-volume UNTITLED
.    \" .\}
.  \}
.
.  if \A\$3 \{\
.    if d doc-volume-ds-\$3 \
.      ds doc-volume "\*[doc-volume-ds-\$3]
.
.    if d doc-volume-as-\$3 \
.      as doc-volume "\*[doc-volume-as-\$3]
.  \}
.
.  if !"\$3"" \
.    if "\*[doc-volume]"LOCAL" \
.      ds doc-volume \$3
.\}
..
.
.
.\" NS doc-operating-system global string
.\" NS   the exact version of the operating system
.
.ds doc-operating-system
.
.
.\" NS Os user macro (not parsed, not callable)
.\" NS   operating system
.\" NS
.\" NS width register `Os' set above
.\" NS
.\" NS modifies:
.\" NS   doc-operating-system
.
.ds doc-operating-system-as-ATT-7th 7th\~Edition
.ds doc-operating-system-as-ATT-7   7th\~Edition
.ds doc-operating-system-as-ATT-III System\~III
.ds doc-operating-system-as-ATT-3   System\~III
.ds doc-operating-system-as-ATT-V   System\~V
.ds doc-operating-system-as-ATT-V.2 System\~V Release\~2
.ds doc-operating-system-as-ATT-V.3 System\~V Release\~3
.ds doc-operating-system-as-ATT-V.4 System\~V Release\~4
.
.ds doc-operating-system-ds-BSD-3    3rd\~Berkeley Distribution
.ds doc-operating-system-ds-BSD-4    4th\~Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.1  4.1\~Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.2  4.2\~Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.3  4.3\~Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.3T 4.3-Tahoe Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.3R 4.3-Reno Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.3t 4.3-Tahoe Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.3r 4.3-Reno Berkeley Distribution
.ds doc-operating-system-ds-BSD-4.4  4.4BSD
.
.ds doc-operating-system-as-NetBSD-0.8  0.8
.ds doc-operating-system-as-NetBSD-0.8a 0.8A
.ds doc-operating-system-as-NetBSD-0.9  0.9
.ds doc-operating-system-as-NetBSD-0.9a 0.9A
.ds doc-operating-system-as-NetBSD-1.0  1.0
.ds doc-operating-system-as-NetBSD-1.0a 1.0A
.ds doc-operating-system-as-NetBSD-1.1  1.1
.ds doc-operating-system-as-NetBSD-1.2  1.2
.ds doc-operating-system-as-NetBSD-1.2a 1.2A
.ds doc-operating-system-as-NetBSD-1.2b 1.2B
.ds doc-operating-system-as-NetBSD-1.2c 1.2C
.ds doc-operating-system-as-NetBSD-1.2d 1.2D
.ds doc-operating-system-as-NetBSD-1.2e 1.2E
.ds doc-operating-system-as-NetBSD-1.3  1.3
.ds doc-operating-system-as-NetBSD-1.3a 1.3A
.ds doc-operating-system-as-NetBSD-1.4  1.4
.ds doc-operating-system-as-NetBSD-1.5  1.5
.
.de Os
.  ds doc-operating-system Null
.
.  if "\$1"" \
.    ds doc-operating-system BSD
.
.  if "\$1"ATT" \{\
.    ds doc-operating-system AT&T
.    ie \A\$2 \{\
.      if d doc-operating-system-as-ATT-\$2 \
.        as doc-operating-system " \*[doc-operating-system-as-ATT-\$2]
.    \}
.    el \
.      as doc-operating-system " UNIX
.  \}
.
.  if "\$1"BSD" \{\
.    if \A\$2 \{\
.      ie d doc-operating-system-ds-BSD-\$2 \
.        ds doc-operating-system \*[doc-operating-system-ds-BSD-\$2]
.      el \
.        tm mdoc warning: .Os: Unknown BSD version `\$2' (#\n[.c])
.    \}
.  \}
.
.  if "\$1"NetBSD" \{\
.    ds doc-operating-system NetBSD
.    if \A\$2 \{\
.      ie d doc-operating-system-as-NetBSD-\$2 \
.        as doc-operating-system \~\*[doc-operating-system-as-NetBSD-\$2]
.      el \
.        tm mdoc warning: .Os: Unknown NetBSD version `\$2' (#\n[.c])
.    \}
.  \}
.
.  if "\*[doc-operating-system]"Null" \{\
.    ds doc-operating-system \$1
.    if !"\$2"" \
.      as doc-operating-system " \$2
.  \}
..
.
.
.\" NS doc-date-string global string
.\" NS   the manual page date as set by `Dd'
.
.ds doc-date-string
.
.
.\" NS Dd user macro (not parsed, not callable)
.\" NS   set document date
.\" NS
.\" NS modifies:
.\" NS   doc-date-string
.\" NS
.\" NS width register `Dd' set above
.
.ds doc-date-string-ds-1  January
.ds doc-date-string-ds-2  February
.ds doc-date-string-ds-3  March
.ds doc-date-string-ds-4  April
.ds doc-date-string-ds-5  May
.ds doc-date-string-ds-6  June
.ds doc-date-string-ds-7  July
.ds doc-date-string-ds-8  August
.ds doc-date-string-ds-9  September
.ds doc-date-string-ds-10 October
.ds doc-date-string-ds-11 November
.ds doc-date-string-ds-12 December
.
.de Dd
.  \" XXX: why do we need gX?
.  if "\*[doc-date-string]"" \
.    nr gX 1
.
.  ie \n[.$] \{\
.    ie (\n[.$] == 3) \
.      ds doc-date-string \$1\~\$2 \$3
.    el \{\
.      ds doc-date-string \*[doc-date-string-ds-\n[mo]]
.      as doc-date-string \~\n[dy], \n[year]
.    \}
.  \}
.  el \
.    ds doc-date-string Epoch
..
.
.
.\" NS doc-header macro
.\" NS   print page header
.
.de doc-header
.  ev doc-caption-environment
.  doc-setup-page-layout
.  if !\n[cR] \
'    sp \n[doc-header-space]u
.  tl @\*[doc-caption-font]\*[doc-header-string]\f[P]@\*[doc-caption-font2]\*[doc-volume]\f[P]@\*[doc-caption-font]\*[doc-header-string]\f[P]@
'  sp \n[doc-header-space]u
.  ev
..
.
.
.\" NS doc-footer macro
.\" NS   print page footer
.
.de doc-footer
.  ie \n[cR] \
'    br
.  el \{\
.    ev doc-caption-enviroment
.    doc-setup-page-layout
'    sp \n[doc-footer-space]u
.    tl @\*[doc-caption-font]\*[doc-operating-system]\f[P]@\*[doc-caption-font2]\*[doc-date-string]\f[P]@%@
'    bp
.    ev
.  \}
..
.
.
.\" NS doc-end-macro macro
.\" NS   finish output
.
.de doc-end-macro
.  \" We may still have a partial line in the environment.  If this is the
.  \" case, and we happen to be on the last line of the page, the `.fl'
.  \" request will cause the page to be ejected and troff will immediately
.  \" exit.  If we are in nroff mode, this would be unfortunate, since we
.  \" would never get a chance to output the footer.  So we fudge the page
.  \" length to make sure that the last page is never ejected until we want
.  \" it to be.
.
.  if \n[cR] \
.    pl +3v
.  fl
.
.  if \n[doc-list-depth] \
.    tm mdoc warning: list open at EOF!  A .Bl directive has no matching .El
.
.  if \n[cR] \{\
'    sp
.    tl @\*[doc-caption-font]\*[doc-operating-system]\f[P]@\*[doc-caption-font2]\*[doc-date-string]\f[P]@%@
.    \" suppress empty lines after the footer
.    pl \n[nl]u
.  \}
..
.
.
.\" NS Pp user macro (not parsed, not callable)
.\" NS   new paragraph
.\" NS
.\" NS width register `Pp' set above
.
.de Pp
.  sp \n[doc-paragraph-space]u
.  if !\n[cR] \
.    ne 2
.  ns
..
.
.
.\" NS Lp user macro (not parsed, not callable)
.\" NS   same as .Pp
.\" NS
.\" NS width register `Lp' set above
.
.als Lp Pp
.
.
.de LP
.  tm Not a \-mdoc command: .LP (#\n[.c])
..
.
.
.de PP
.  tm Not a \-mdoc command: .PP (#\n[.c])
..
.
.
.de pp
.  tm Not a \-mdoc command: .pp (#\n[.c])
..
.
.
.de SH
.  tm Not a \-mdoc command: .SH (#\n[.c])
..
.
.
.\" NS Nd user macro (not parsed, not callable)
.\" NS   print name description
.\" NS
.\" NS width register `Nd' set above
.
.de Nd
.  nop \- \$*
..
.
.
.\" NS Ss user macro (not parsed, not callable)
.\" NS   subsection
.\" NS
.\" NS width register `Ss' set above
.\" NS
.\" NS local variable:
.\" NS   doc-reg-Ss
.
.de Ss
.  ie \n[.$] \{\
.    sp
.    if !\n[cR] \
.      ne 3
.    ti -.25i
.
.    nop \*[doc-Sh-font]\$1\c
.    nr doc-reg-Ss 2
.    while (\n[doc-reg-Ss] <= \n[.$]) \{\
.      nop \& \|\$[\n[doc-reg-Ss]]\c
.      nr doc-reg-Ss +1
.    \}
.    nop \f[P]\s[0]
.
.    ta T .5i
.    if !\n[cR] \
.      ne 2
.    br
.  \}
.  el \
.    tm Usage: .Ss subsection_name ... (#\n[.c])
..
.
.
.de Rd
.  tm MDOC REGISTER DUMP
.  tm Db==\n[Db] register DEBUG MODE
.
.  tm L[0-9] registers - stack of list types
.  tm L0==\n[L0]
.  tm L1==\n[L1]
.  tm L2==\n[L2]
.  tm L3==\n[L3]
.  tm L4==\n[L4]
.  tm L5==\n[L5]
.  tm L6==\n[L6]
.  tm L7==\n[L7]
.  tm L8==\n[L8]
.  tm L9==\n[L9]
.
.  tm O[0-9] registers - stack of indent
.  tm O0==\n[O0]
.  tm O1==\n[O1]
.  tm O2==\n[O2]
.  tm O3==\n[O3]
.  tm O4==\n[O4]
.  tm O5==\n[O5]
.  tm O6==\n[O6]
.  tm O7==\n[O7]
.  tm O8==\n[O8]
.  tm O9==\n[O9]
.
.  tm doc-arg-limit==\n[doc-arg-limit] register
.  tm1 "  arguments processed so far (doc-parse-args/doc-parse-arg-vector)
.  tm aJ==\n[aJ] register
.  tm1 "  for doc-skip-punct-backwards
.  tm aN==\n[aN] register
.  tm doc-arg-ptr==\n[doc-arg-ptr] register
.  tm1 "  argument pointer (doc-parse-args)
.  tm doc-arg-type==\*[doc-arg-type] string
.  tm1 "  argument type
.  tm bK==\n[bK] register - Book Name flag
.  tm cF==\n[cF] register save current font
.  tm cI==\n[cI] register - column indent width
.  tm cZ==\n[cZ] register save current font size
.  tm dK==\n[dK] register - Date flag
.
.  tm d[0-9] registers - display-type stack
.  tm d0==\n[d0]
.  tm d1==\n[d1]
.  tm d2==\n[d2]
.  tm d3==\n[d3]
.  tm d4==\n[d4]
.  tm d5==\n[d5]
.  tm d6==\n[d6]
.  tm d7==\n[d7]
.  tm d8==\n[d8]
.  tm d9==\n[d9]
.
.  tm doc-diversion-level==\n[doc-diversion-level] register
.  tm1 "  diversion count
.  tm doc-declaration-count==\n[doc-declaration-count] register
.  tm1 "  subroutine test (in synopsis only)
.  tm doc-num-args==\n[doc-num-args] register
.  tm1 "  number of arguments (must set to \n[.$] prior to use)
.  tm fY==\n[fY] register - dick with old style function declarations (fortran)
.  tm doc-function-count==\n[doc-function-count] register
.  tm1 "  also subroutine count (in synopsis only)
.
.  tm iI==\n[iI] local register (indent for inline debug mode)
.  tm iN==\n[iN] register DEBUG MODE (inline if 1, to stderr if 0)
.  tm doc-indent-synopsis==\n[doc-indent-synopsis] register
.  tm1 "  indent second command line in a synopsis
.  tm jK==\n[jK] register - [reference] Journal Name flag
.  tm jM==\n[jM] local register
.  tm jN==\n[jN] local register
.  tm lC==\n[lC] register - list type stack counter
.  tm lK==\n[lK] register count of lines read from input file
.  tm nK==\n[nK] register - [reference] issue number flag
.  tm nU==\n[nU] register count
.  tm oK==\n[oK] register - [reference] optional information flag
.  tm doc-nesting-level==\n[doc-nesting-level] register
.  tm1 "  (extension possible)
.
.  tm o[0-9] register offset stack (nested tags)
.  tm o0==\n[o0]
.  tm o1==\n[o1]
.  tm o2==\n[o2]
.  tm o3==\n[o3]
.  tm o4==\n[o4]
.  tm o5==\n[o5]
.  tm o6==\n[o6]
.  tm o7==\n[o7]
.  tm o8==\n[o8]
.  tm o9==\n[o9]
.
.  tm doc-nesting-level==\n[doc-nesting-level] register
.  tm1 "  open ended line flag
.  tm pK==\n[pK] register - [reference] page number flag
.  tm qK==\n[qK] register - Corporate or Foreign Author flag
.  tm rK==\n[rK] register - [reference] report flag
.  tm rS==\n[rS] register - Reference Start flag
.  tm doc-space-mode==\n[doc-space-mode] register
.  tm1 "  default is one (space mode on)
.  tm tK==\n[tK] register - reference title flag
.  tm tP==\n[tP] register tag flag (for diversions)
.  tm tX==\n[tX] register (initial class)
.  tm tY==\n[tY] register (next possible lC value)
.
.  tm t[0-9] register tag string stack (nested tags)
.  tm t0==\n[t0]
.  tm t1==\n[t1]
.  tm t2==\n[t2]
.  tm t3==\n[t3]
.  tm t4==\n[t4]
.  tm t5==\n[t5]
.  tm t6==\n[t6]
.  tm t7==\n[t7]
.  tm t8==\n[t8]
.  tm t9==\n[t9]
.
.  tm uK==\n[uK] register - reference author(s) counter
.  tm vK==\n[vK] register - reference volume flag
.
.  tm v[0-9] register vertical tag break stack
.  tm v0==\n[v0]
.  tm v1==\n[v1]
.  tm v2==\n[v2]
.  tm v3==\n[v3]
.  tm v4==\n[v4]
.  tm v5==\n[v5]
.  tm v6==\n[v6]
.  tm v7==\n[v7]
.  tm v8==\n[v8]
.  tm v9==\n[v9]
.
.  tm w[0-9] register tag stack (nested tags)
.  tm w0==\n[w0]
.  tm w1==\n[w1]
.  tm w2==\n[w2]
.  tm w3==\n[w3]
.  tm w4==\n[w4]
.  tm w5==\n[w5]
.  tm w6==\n[w6]
.  tm w7==\n[w7]
.  tm w8==\n[w8]
.  tm w9==\n[w9]
.
.  tm END OF REGISTER DUMP
..
.
.\" EOF
